.TH "cgroup.conf" "5" "September 2010" "cgroup.conf 2.2" "Slurm configuration file"

.SH "NAME"
cgroup.conf \- Slurm configuration file for the cgroup support

.SH "DESCRIPTION"
\fB/etc/cgroup.conf\fP is an ASCII file which defines parameters used by 
Slurm's proctrack/cgroup plugin in support of Linux cgroups being used as a
job container. The file will always be located in the same directory as the 
\fBslurm.conf\fP file.
.LP
Parameter names are case insensitive.
Any text following a "#" in the configuration file is treated
as a comment through the end of that line.
The size of each line in the file is limited to 1024 characters.
Changes to the configuration file take effect upon restart of
SLURM daemons, daemon receipt of the SIGHUP signal, or execution
of the command "scontrol reconfigure" unless otherwise noted.
.LP
Slurm cgroup proctrack plugin creates a hierarchical set of
directories for each step, putting the step tasks into the leaf.
This directory structure is like the following:
.br 
/dev/cgroup/slurm/freezer/uid_%uid/job_%jobid/step_%stepid

.LP
Slurm cgroup proctrack plugin is used to track processes using the
freezer subsystem.  

.LP
The cgroup proctrack plugin is enabled with the following parameter
in slurm.conf:
.br 
ProctrackType=proctrack/cgroup


.LP
Slurm cgroup task plugin creates a hierarchical set of directories
for each task. The directory structure is like the following:
.br 
/dev/cgroup/slurm/cpuset/uid_%uid/job_%jobid/step_%stepid/task_%taskid
.LP
Slurm cgroup task plugin is used to bind tasks to cpus using the
cpuset subsystem. 

.LP
The cgroup task plugin is enabled with the following parameter
in slurm.conf:
.br 
TaskpluginParam=cgroups

.LP
The following cgroup.conf parameters are defined to control the general behavior
of Slurm cgroups.

.TP
\fBCgroupSubsystems\fR=<comma-separated list of subsystems>
List of cgroup subsystems to be created/mounted by the task_cgroup plugin at
plugin initialization, if they are not already mounted. Initially, only the 
cpuset subsystem is supported.  Other subsystems (e.g., memory, devices) will
be added in the future.

.TP
\fBCgroupAutomount\fR=<yes|no>
Slurm cgroup plugins require a valid and functional cgroup system mounted on 
/dev/cgroup. When launched, plugins check cgroup availability. If cgroup is 
not available, the plugin launch fails unless CgroupAutomount is set to yes. 
In that case, the plugin will first try to mount the cgroup system.

.TP
\fBCgroupReleaseAgent\fR=<path_to_release_agent_directory>
Used to tune the cgroup system behavior. This parameter identifies the location 
of the directory containing Slurm cgroup release_agent files. A release_agent file
is required for each mounted subsystem. The release_agent file name must have the
following format: release_<subsystem_name>.  For instance, the release_agent file
for the cpuset subsystem must be named release_cpuset.  See also CLEANUP OF
CGEORUPS below.

.LP
The following cgroup.conf parameter controls task binding when TaskPlugin=task/cgroup
is configured in slurm.conf.

.TP
\fBTaskAffinityBindType\fR=<none | sockets | cores | threads> [, verbose]
Specifies the task affinity binding type. The value "none" causes no task binding. The 
value "sockets" causes binding of tasks to sockets; the value "cores" causes binding of 
tasks to cores; and the value "threads" causes binding of tasks to threads. The verbose
option reports binding information before tasks run. Default value is none.

.LP
The following cgroup.conf parameters are defined to constrain cores, RAM and swap space for 
jobs and set a variety of default job and job step parameters for cgroups.  These parameters
require the memory subsystem and currently have no effect.  They may be supported in a 
future update.

.TP
\fBAllowedRAMSpace\fR=<number>
Constrain the job cgroup RAM to this percentage of the allocated memory.
The default value is 100.
If the limit is exceeded, the job steps will be killed and a warning message
will be written to standard error.
Also see \fBConstrainRAMSpace\fR.

.TP
\fBAllowedSwapSpace\fR=<number>
Constrain the job cgroup swap space to this percentage of the allocated memory.
The default value is 0.
If the limit is exceeded, the job steps will be killed and a warning message
will be written to standard error.
Also see \fBConstrainSwapSpace\fR.

.TP
\fBConstrainCores\fR=<yes|no>
If configured to "yes" then constrain allowed cores to the subset of 
allocated resources.
The default value is "no".

.TP
\fBConstrainRAMSpace\fR=<yes|no>
If configured to "yes" then constraing the job's RAM usage.
The default value is "no".
Also see \fBAllowedRAMSpace\fR.

.TP
\fBConstrainSwapSpace\fR=<yes|no>
If configured to "yes" then constraing the job's swap space usage.
The default value is "no".
Also see \fBAllowedSwapSpace\fR.

.TP
\fBJobCgroupParams\fR=<options>
Used to tune job cgroup. The format of the parameter is the following:
"a=b c=d e=f" where a,c,d corresponds to files under the cgroup 
directory and b,d,f the values to write in these files.

.TP
\fBJobStepCgroupParams\fR=<options>
Used to tune job step cgroup. The format of the parameter is the following:
"a=b c=d e=f" where a,c,d corresponds to files under the cgroup 
directory and b,d,f the values to write in these files.


.SH "EXAMPLE"
.LP
.br
###
.br
# Slurm cgroup support configuration file
.br
###
.br
CgroupAutomount=yes
.br
CgroupReleaseAgent="/etc/slurm/"
.br
#

.SH "NOTES"
.LP
Only one instance of a cgroup subsystem is valid at a time in the kernel.
If you try to mount another cgroup hierarchy that uses the same cpuset 
subsystem it will fail.
However you can mount another cgroup hierarchy for a different cpuset 
subsystem.

.SH CLEANUP OF CGROUPS
.LP
To allow cgroups to be removed automatically when they are no longer in use
the notify_on_release flag is set in each cgroup when the cgroup is
instantiated. The release_agent file for each subsystem is set up when the
subsystem is mounted.  The name of each release_agent file is 
release_<subsystem name>. The directory is specified via the CgroupReleaseAgent
parameter in cgroup.conf. A simple release agent mechanism to remove slurm
cgroups when they become empty may be set up by creating the release agent
files for each required subsystem as symbolic links to a common release agent
script, as shown in the example below:

[sulu] (slurm) etc> cat cgroup.conf | grep CgroupReleaseAgent
.br
CgroupReleaseAgent="/etc/slurm/cgroup"
.br

[sulu] (slurm) etc> ls -al /etc/slurm/cgroup
.br
total 12
.br
drwxr-xr-x 2 root root 4096 2010-04-23 14:55 .
.br
drwxr-xr-x 4 root root 4096 2010-07-22 14:48 ..
.br
-rwxrwxrwx 1 root root  234 2010-04-23 14:52 release_common
.br
lrwxrwxrwx 1 root root   32 2010-04-23 11:04 release_cpuset -> /etc/slurm/cgroup/release_common
.br
lrwxrwxrwx 1 root root   32 2010-04-23 11:03 release_freezer -> /etc/slurm/cgroup/release_common

[sulu] (slurm) etc> cat /etc/slurm/cgroup/release_common
.br
#!/bin/bash
.br
base_path=/dev/cgroup/slurm
.br
progname=$(basename $0)
.br
subsystem=${progname##*_}
.br
if [[ -d ${base_path}/${subsystem} ]]
.br
then
.br
     rmdir ${base_path}/${subsystem}$@
.br
fi

.SH "COPYING"
Copyright (C) 2010 Lawrence Livermore National Security.
Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
CODE\-OCEC\-09\-009. All rights reserved.
.LP
This file is part of SLURM, a resource management program.
For details, see <https://computing.llnl.gov/linux/slurm/>.
.LP
SLURM is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.LP
SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

.SH "SEE ALSO"
.LP
\fBslurm.conf\fR(5)
